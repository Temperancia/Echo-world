{"version":3,"file":"common.umd.min.js","sources":["../../../../modules/common/src/transfer_http.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  HTTP_INTERCEPTORS,\n  HttpEvent,\n  HttpHandler,\n  HttpHeaders,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse\n} from '@angular/common/http';\nimport {ApplicationRef, Injectable, NgModule} from '@angular/core';\nimport {BrowserTransferStateModule, TransferState, makeStateKey} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {filter} from 'rxjs/operators/filter';\nimport {tap} from 'rxjs/operators/tap';\nimport {take} from 'rxjs/operators/take';\n\nexport interface TransferHttpResponse {\n  body?: any | null;\n  headers?: {[k: string]: string[]};\n  status?: number;\n  statusText?: string;\n  url?: string;\n}\n\nfunction getHeadersMap(headers: HttpHeaders) {\n  const headersMap: {[name: string]: string[]} = {};\n  for (const key of headers.keys()) {\n    headersMap[key] = headers.getAll(key)!;\n  }\n  return headersMap;\n}\n\n@Injectable()\nexport class TransferHttpCacheInterceptor implements HttpInterceptor {\n\n  private isCacheActive = true;\n\n  private invalidateCacheEntry(url: string) {\n    this.transferState.remove(makeStateKey<TransferHttpResponse>('G.' + url));\n    this.transferState.remove(makeStateKey<TransferHttpResponse>('H.' + url));\n  }\n\n  constructor(appRef: ApplicationRef, private transferState: TransferState) {\n    // Stop using the cache if the application has stabilized, indicating initial rendering is\n    // complete.\n    appRef.isStable\n      .pipe(\n        filter((isStable: boolean) => isStable),\n        take(1)\n      ).toPromise()\n      .then(() => { this.isCacheActive = false; });\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Stop using the cache if there is a mutating call.\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      this.isCacheActive = false;\n      this.invalidateCacheEntry(req.url);\n    }\n\n    if (!this.isCacheActive) {\n      // Cache is no longer active. Pass the request through.\n      return next.handle(req);\n    }\n\n    const key = (req.method === 'GET' ? 'G.' : 'H.') + req.url;\n    const storeKey = makeStateKey<TransferHttpResponse>(key);\n\n    if (this.transferState.hasKey(storeKey)) {\n      // Request found in cache. Respond using it.\n      const response = this.transferState.get(storeKey, {} as TransferHttpResponse);\n      return observableOf(new HttpResponse<any>({\n        body: response.body,\n        headers: new HttpHeaders(response.headers),\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      }));\n    } else {\n      // Request not found in cache. Make the request and cache it.\n      const httpEvent = next.handle(req);\n      return httpEvent\n        .pipe(\n          tap((event: HttpEvent<any>) => {\n            if (event instanceof HttpResponse) {\n              this.transferState.set(storeKey, {\n                body: event.body,\n                headers: getHeadersMap(event.headers),\n                status: event.status,\n                statusText: event.statusText,\n                url: event.url!,\n              });\n            }\n          })\n        );\n    }\n  }\n}\n\n/**\n * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP\n * calls from the server to the client application.\n */\n@NgModule({\n  imports: [BrowserTransferStateModule],\n  providers: [\n    TransferHttpCacheInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: TransferHttpCacheInterceptor, multi: true},\n  ],\n})\nexport class TransferHttpCacheModule {}\n"],"names":["appRef","transferState","this","isStable","pipe","filter","take","toPromise","then","_this","isCacheActive","TransferHttpCacheInterceptor","url","remove","makeStateKey","req","next","method","invalidateCacheEntry","handle","key","storeKey","hasKey","response","get","observableOf","HttpResponse","body","headers","HttpHeaders","status","statusText","tap","event","set","headersMap","_a","keys","_i","getAll","getHeadersMap","Injectable","ApplicationRef","TransferState","NgModule","imports","BrowserTransferStateModule","providers","provide","HTTP_INTERCEPTORS","useExisting","multi"],"mappings":"8vBAkDE,WAAYA,EAAgCC,GAA5C,WAA4CC,mBAAAD,sBAPpB,EAUtBD,EAAOG,SACJC,KACCC,SAAO,SAACF,GAAsB,OAAAA,IAC9BG,OAAK,IACLC,YACDC,KAAK,WAAQC,EAAKC,eAAgB,WAb/BC,0CAAqBC,GAC3BV,KAAKD,cAAcY,OAAOC,eAAmC,KAAOF,IACpEV,KAAKD,cAAcY,OAAOC,eAAmC,KAAOF,KActED,sBAAA,SAAUI,EAAuBC,GAAjC,WAOE,GALmB,QAAfD,EAAIE,QAAmC,SAAfF,EAAIE,SAC9Bf,KAAKQ,eAAgB,EACrBR,KAAKgB,qBAAqBH,EAAIH,OAG3BV,KAAKQ,cAER,OAAOM,EAAKG,OAAOJ,GAGrB,IAAMK,GAAsB,QAAfL,EAAIE,OAAmB,KAAO,MAAQF,EAAIH,IACjDS,EAAWP,eAAmCM,GAEpD,GAAIlB,KAAKD,cAAcqB,OAAOD,GAAW,CAEvC,IAAME,EAAWrB,KAAKD,cAAcuB,IAAIH,MACxC,OAAOI,KAAa,IAAIC,gBACtBC,KAAMJ,EAASI,KACfC,QAAS,IAAIC,cAAYN,EAASK,SAClCE,OAAQP,EAASO,OACjBC,WAAYR,EAASQ,WACrBnB,IAAKW,EAASX,OAKhB,OADkBI,EAAKG,OAAOJ,GAE3BX,KACC4B,MAAI,SAACC,GACCA,aAAiBP,gBACnBjB,EAAKR,cAAciC,IAAIb,GACrBM,KAAMM,EAAMN,KACZC,QA/DhB,SAAuBA,GAErB,IADA,IAAMO,SACYC,EAAAR,EAAQS,OAARC,WAAAA,KAAb,IAAMlB,OACTe,EAAWf,GAAOQ,EAAQW,OAAOnB,GAEnC,OAAOe,EA0DgBK,CAAcP,EAAML,SAC7BE,OAAQG,EAAMH,OACdC,WAAYE,EAAMF,WAClBnB,IAAKqB,gCA1DpBQ,wDAxBOC,wBAC4BC,8EA8FnCC,kBACCC,SAAUC,8BACVC,WACEpC,GACCqC,QAASC,oBAAmBC,YAAavC,EAA8BwC,OAAO"}